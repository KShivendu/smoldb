syntax = "proto3";

package smoldb_p2p_grpc;

import "google/protobuf/empty.proto";

// Simple service:

service Service {
  // Returns the title and version of the service - useful for debugging
  rpc RootApi (RootApiRequest) returns (RootApiReply) {}
}

message RootApiRequest {}

message RootApiReply {
  string title = 1;
  string version = 2;
}

// Raft service:

service Raft {
  // Send Raft message to this peer
  rpc Send (RaftMessage) returns (google.protobuf.Empty);
  // Send to bootstrap peer
  // Returns uri by id if bootstrap knows this peer
  rpc WhoIs (PeerId) returns (Uri);
  // Send to bootstrap peer
  // Proposes to add this peer as participant of consensus
  // Returns all peers
  rpc AddPeerToKnown (AddPeerToKnownMessage) returns (AllPeers);
}

message RaftMessage {
  bytes message = 1;
}

message AllPeers {
  repeated Peer all_peers = 1;
  uint64 first_peer_id = 2;
}

message Peer {
  string uri = 1;
  uint64 id = 2;
}

message AddPeerToKnownMessage {
  optional string uri = 1;
  optional uint32 port = 2;
  uint64 id = 3;
}

message PeerId {
  uint64 id = 1;
}

message Uri {
  string uri = 1;
}


// Internal points service for syncing data between peers:

service PointsInternal {
  rpc GetPoints (GetPointsRequest) returns (GetPointsResponse) {}
  rpc Upsert (UpsertPointsInternal) returns (PointsOperationResponseInternal) {}
}

message UpsertPointsInternal {
  optional uint32 shard_id = 2;
}

message PointsOperationResponseInternal {
  string message = 1;
}

message GetPointsResponse {
  repeated Point points = 1;
}

message GetPointsRequest {
  string collection_name = 1;
  repeated uint64 ids = 2;
  bool return_all = 3; // If true, return all points in the collection
  optional uint32 shard_id = 4;
}

message Point {
  uint64 id = 1;
  map<string, string> payload = 2; // limiting the payload type for now
}
